@model GuiaTrader.Models.ResultadoPartidaViewModel
@{
    Dictionary<DateTime, List<GuiaTrader.Models.ResultadoPartida>> dictGroup = Model.listaResultadoPartida.GroupBy(gp => new DateTime(gp.partida.horarioPartida.Year, gp.partida.horarioPartida.Month, gp.partida.horarioPartida.Day)).ToDictionary(gp => gp.Key, gp => gp.ToList());
    Double diasGreen = 0;
    Double resultado = 0;
    Int32 diasRed = 0;
    foreach (DateTime data in dictGroup.Keys)
    {
        resultado += dictGroup[data].Sum(x => x.valor);
        if (dictGroup[data].Sum(x => x.valor) >= 0)
            diasGreen++;
        else
            diasRed++;
    }

    Dictionary<DateTime, Double> dictDias = new Dictionary<DateTime, Double>();
    DateTime dt = new DateTime(Model.dataReferencia.Year, Model.dataReferencia.Month, 1);
    DateTime dtFim = Model.dataReferencia;

    while (dt <= dtFim)
    {
        Double valor = 0;
        if (dictGroup.ContainsKey(dt))
            valor = dictGroup[dt].Sum(x => x.valor);

        dictDias.Add(dt, valor);

        dt = dt.AddDays(1);
    }
}

<div class="row" style="margin-top: 20px; text-align: center">
    <h3>Relatório Mensal - @Model.dataReferencia.ToString("MMM/yyyy")</h3>
</div>

<div class="row d-flex flex-row-reverse" style="margin-top: 15px;">
    <div class="col-lg-4">
        
        <div class='input-group' id='dataMes' data-td-target-input='nearest' data-td-target-toggle='nearest'>
            <h6 style="margin-top:auto; margin-right: 5px;">Data Referência </h6>
            <input id='dataMesInput' type='text' class='form-control' value="@(Model.dataReferencia.ToString("MMM/yyyy"))" data-td-target='#dataMes' data-td-toggle='datetimepicker' />
        </div>
    </div>
</div>

<div class="card text-center" style="border-color: white;">
    <div class="card-body">
        <div class="row">
            <div class="col-lg-6" style="padding: 0px;">
                <div class="row" style="margin:0px;">
                    <div class="row" style="margin: 0px; padding:0px;">
                        <div class="card bg-success  text-center col-lg-6" style="padding:0px; border-radius: 0px;">
                            <h4 class="text-white">GREEN</h4>
                        </div>
                        <div class="card bg-danger text-center col-lg-6" style="padding: 0px; border-radius: 0px;">
                            <h4 class="text-white">RED</h4>
                        </div>
                    </div>
                    <div class="card-footer text-muted bg-secondary" style="padding: 0px;">
                        <h6 class="text-white">ENTRADAS FEITAS NO MÊS</h6>
                    </div>
                    <div class="card-body col-lg-6" style="padding: 0px;">
                        <h3 class="text-success">@Model.listaResultadoPartida.Where(x => x.resultado == true).Count()</h3>
                    </div>
                    <div class="card-body col-lg-6" style="padding: 0px;">
                        <h3 class="text-danger">@Model.listaResultadoPartida.Where(x => x.resultado == false).Count()</h3>
                    </div>
                    <div class="card-footer text-muted bg-default" style="padding: 0px;">
                        <h7 class="text-black">Total de entradas @Model.listaResultadoPartida.Count()</h7>
                    </div>

                    <div class="card-footer text-muted bg-secondary" style="padding: 0px;">
                        <h6 class="text-white">DIAS</h6>
                    </div>
                    <div class="card-body col-lg-6" style="padding: 0px;">
                        <h3 class="text-success">@diasGreen</h3>
                    </div>
                    <div class="card-body col-lg-6" style="padding: 0px;">
                        <h3 class="text-danger">@diasRed</h3>
                    </div>
                    <div class="card-footer text-muted bg-default" style="padding: 0px;">
                        <h7 class="text-black">Total de dias @(diasGreen + diasRed)</h7>
                    </div>
                </div>
            </div>
            <div class="col-lg-6" style="padding: 0px;">
                <div class="row justify-content-md-center">
                    <div class="col-lg-4">
                        <canvas id="chart" width="100" height="50"></canvas>
                    </div>
                    <div class="col-lg-6">
                        <div class="row">
                            <div class="col-lg-8">Banca Inicial</div>
                            <div class="col-lg-4">R$ 100,00</div>
                            <div class="col-lg-8">Stake</div>
                            <div class="col-lg-4">R$ 10,00</div>
                            <div class="col-lg-8">Lucro (R$)</div>
                            @if (resultado >= 0)
                            {
                                <div class="col-lg-4"><h6 class="text-success">@(resultado.ToString("R$ ###.00").Replace(".", ","))</h6></div>
                                <div class="col-lg-8">Lucro sob a banca(%)</div>
                                <div class="col-lg-4"><h6 class="text-success">@(((resultado / 100.0)).ToString("###.00 %").Replace(".", ","))</h6></div>
                            }
                            else
                            {
                                <div class="col-lg-4"><h6 class="text-danger">@(resultado.ToString("R$ ###.00").Replace(".", ","))</h6></div>
                                <div class="col-lg-8">Lucro sob a banca(%)</div>
                                <div class="col-lg-4"><h6 class="text-danger">@(((resultado / 100.0)).ToString("###.00 %").Replace(".", ","))</h6></div>
                            }
                            <div class="col-lg-8">WinRate(%)</div>
                            @if (((Math.Round((Double.Parse(Model.listaResultadoPartida.Where(x => x.resultado == true).Count().ToString()) / (Model.listaResultadoPartida.Count())) * 100, 2)) >= 50) ? true : false)
                            {
                                <div class="col-lg-4 text-success">@(Math.Round((Double.Parse(Model.listaResultadoPartida.Where(x => x.resultado == true).Count().ToString()) / (Model.listaResultadoPartida.Count())) * 100, 2)) %</div>
                            }
                            else
                            {
                                <div class="col-lg-4 text-danger">@(Math.Round((Double.Parse(Model.listaResultadoPartida.Where(x => x.resultado == true).Count().ToString()) / (Model.listaResultadoPartida.Count())) * 100, 2)) %</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-12" style="padding:0px;">
        <canvas id="chartBar" width="100" height="50" style="width: 100px; height: 60px;"></canvas>
    </div>
</div>

<div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Horário da Partida</th>
                <th>Campeonato</th>
                <th>Partida</th>
                <th>Valor</th>
            </tr>
        </thead>
        <tbody>
            @foreach (GuiaTrader.Models.ResultadoPartida resultadoPartida in Model.listaResultadoPartida.OrderBy(x => x.partida.horarioPartida))
            {
                if (resultadoPartida.resultado)
                {
                    <tr>
                        <td>@resultadoPartida.partida.horarioPartida.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>@resultadoPartida.partida.campeonato</td>
                        <td>@resultadoPartida.partida.casa.nome x @resultadoPartida.partida.visitante.nome</td>
                        <td class="text-success">@(resultadoPartida.valor.ToString("R$ ###.00").Replace(".", ","))</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@resultadoPartida.partida.horarioPartida.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>@resultadoPartida.partida.campeonato</td>
                        <td>@resultadoPartida.partida.casa.nome x @resultadoPartida.partida.visitante.nome</td>
                        <td class="text-danger">@(resultadoPartida.valor.ToString("R$ ###.00").Replace(".", ","))</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<script>
    $(document).ready(function () {

        const dtMes = document.getElementById('dataMes');
        const dtMesTempus = new tempusDominus.TempusDominus(dtMes, {
            localization: { locale: 'pt-br' },
            restrictions: {
                maxDate: moment().format("YYYY-MM-") + moment().daysInMonth()
            },
            display: {
                components: {
                    clock: false,
                    date: false,
                }
            },
        });

        dtMesTempus.dates.setValue(new tempusDominus.DateTime('@Model.dataReferencia.ToString("yyyy-MM-dd")'));

        dtMes.addEventListener(tempusDominus.Namespace.events.change, (e) => {
            $.ajax({
                url: "@Url.Action("getResumoMes", "Home")",
                data: { dataReferencia: moment(e.detail.date).format('YYYY-MM-DD') },
                success: function (result) {
                    $("#conteudo").empty();
                    $("#btnResumo").removeClass('btn-secondary');
                    $("#btnPartidas").addClass('btn-secondary');
                    $("#btnPartidas").removeClass('btn-primary');
                    $("#btnResumo").addClass('btn-primary');
                    $("#conteudo").html(result);
                    $("#btnResumo").blur();
                }
            });
        });

        const ctx = document.getElementById('chart').getContext('2d');
        const myChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Green', 'Red'],
                datasets: [{
                    label: '# de Entradas',
                    data: ["@Model.listaResultadoPartida.Where(x => x.resultado).Count()", "@Model.listaResultadoPartida.Where(x => !x.resultado).Count()"],
                    backgroundColor: [
                        'rgb(25, 135, 84)',
                        'rgb(220, 53, 69)'

                    ],
                    borderColor: [
                        'rgb(25, 135, 84)',
                        'rgb(220, 53, 69)'

                    ],
                    hoverOffset: 5,
                    cutout: 60
                }],
                plugins: {
                    datalabels: {
                        formatter: (value, ctx) => {
                            let sum = 0;
                            let dataArr = ctx.chart.data.datasets[@(Model.listaResultadoPartida.Where(x => x.resultado).Count()),
                                                              @(Model.listaResultadoPartida.Where(x => !x.resultado).Count())]
                        }
                    }
                }
            }
        });

        const ctxBar = document.getElementById('chartBar').getContext('2d');
        ctxBar.canvas.width = 50;
        ctxBar.canvas.height = 10;
        const valor = @Html.Raw(Json.Serialize(dictDias.Values));
        const cores = valor.map((value) => value < 0 ? 'rgb(220, 53, 69)' : 'rgb(25, 135, 84)');
        const myChartBar = new Chart(ctxBar, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(dictDias.Keys.Select(x => x.ToString("dd/MMM")).ToList())),
                datasets: [{
                    label: "Resultado do mês",
                    data: valor,
                    backgroundColor: cores,
                    borderColor: cores,
                    borderWidth: 1
                }],
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            }
        });
    });

</script>